- function 키워드
화살표 함수 이전에 많이 쓰던 것

const func = function sum(a, b) {

}

 - (), {}
 블록 {}, 변수 {}
 매개변수 (), 

화살표 함수
{} -> 여러 줄, return이 있을때
() -> 단일 표현식, return이 없을 때

- ...(전개 연산자)
새로운 배열을 생성해서 원본 배열이 변경되지 않는다. 
함수형 프로그래밍은 불변성의 원칙에 따라 새로운 상태나 데이터 구조를 만드는 것이 권장된다.
예기치 않은 데이터 수정이나 부작용이 발생하는 것을 방지할 수 있다.

- Performance Hooks
Node.js의 API, 어프리케이션의 성능을 축정하고 분석하기 위한 도구(다양한 이벤트 작업에 세밀한 타이밍 정보 제공한다.)

1) Performance Timeline : 특정 작업이 언제 시작했고, 언제 끝났는지 그리고 그 사이에 무슨 일이 발생했는지
2) User Timing : 개발자가 직접 특정 코드의 실행 시간을 측정할 수 있게 한다.
3) High Resolution Time : 마이크로초 단위 시간 측정
4) Performance Observer : Performance Timeline에서 일어나는 변화를 비동기적으로 관찰

import {performance} from 'perf_hooks';

function myPerformance() {
    const start = performance.now();

    for()

    const end = performance.now();

    console.log(end - start);
}

myPerformance

- Ref Hooks
.current 속성으로 변경 가능한 ref 객체를 반환한다. 우리는 이를 통해서
1) DOM 접근 : DOM요소에 직접적으로 접근할 때, useRef를 사용하여 해당 요소의 참조를 저장할 수 있다.
2) 변수 저장 : 컴포넌트 라이프 사이클 동안 값이 유지되어야하지만, 리렌더링이 되지 않은 변수를 저장하는데 사용된다.

import React, {useEffect, useRef, useState} from 'react';

function TextInputButton() {
    const input = useRef(null);

    const onBtnClick = () => {
        input.current.foucus();
    };

    return (
        <>
            <input ref={input} type="text"/>
            <button onClick={onBtnClick}>입력 창으로</button>
        </>
    )
}

export default {TextInputButton, TextInputButton2};

- Custom Hook
함수형 컴포넌트 내에서 로직을 재사용하기 위한 기능
use로 시작하는 함수를 작성하여, 다른 컴포넌트에서 쓸 수 있게 해준다.
1) 함수 이름 : Custom Hook 함수는 use로 시작해야한다.
2) React Hooks 사용: 커스텀 훅 내부에 다른 React Hook 자유롭게 사용할 수 있다.
3) 로직 추상화: 특정 로직 또는 기능을 추상화하여 제공해야 한다.

import {useState, useEffect} from 'react';

function useWindowWidth() {
    const [windowWidth, setWindowWidth] = useState(window.innerHeight);

    useEffect(() => {
        const handleResize = () => {
            setWindowWidth(window.innerHeight);
        };

        window.addEventListener('resize', handleResize);

        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []);

    return windowWidth;
}

function 

1. 장바구니
입력 창에 장바구니에 넣을 것을 적어서 장바구니에 추가할 수 있다.
완료된 항목을 체크할 수 있는 체크박스

<kabel ctyle = {textDecoration: 'kine_through', 'nore'}

2. 타이머
시작, 일시정지, 중지 만들어서 초 세주기
interval을 사용해도 되고, perf_hooks 사용해도 된다.

3. 페이지 만들어서 넘기면 사각형 상자 나오게
색깔 랜덤 : '#' + Math.floor(Math.random() * 16777215).toString(16);
#4F2A16;

const data = [
    {id:1, text:'Hu'},
    {id:2, text:'He'},
    {id:3, text:'Ho'},
  ]
<Page data={data} itemsPerPage={page}/>

function Page({data, itemsPerPage}) {
    
}
