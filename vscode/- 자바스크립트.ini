- 자바스크립트
1. 동적인 웹 페이지 : HTML 요소를 선택하고 내용, 스타일, 동작 등을 공적으로 변경할 수 있다.
사용자와 상호작용하여 다양한 이벤트에 반응하는 웹 어플리케이션 만들 수 있다.
2. 클라이언트 측 프로그래밍 : 클라이언트 측에서 실행되는 언어다. 사용자의 웹 브라우저에서 사용된다.
3. 객체 지향 프로그래밍 : OOP 개념 사용하고, 객체, 메서드, 속성 등을 활용하여 작성할 수 있다.
4. 이벤트 기반 프로그래밍 : 이벤트 기반(Event-driven) 모델을 따른다. 이벤트 발생 시 해당 이벤트 대한 처리기(Event Handler) 함수를 사용한다.
5. API와 상호작용 : 외부 리소스와 서비스에 접근하여 사용가능하다.
6. 다른 플렛폼에서 활용 : Node.js, Dart 등에서 자바스크립트를 활용하여 사용할 수 있다.

문제1 : 사용자한테 문자를 입력받아서 한줄에 한글자씩 출력해보기
문제2 : 사용자한테 문자를 입력받아서 펠린드롬인지 아닌지 출력해보기
(문자열이 뒤집어졌을때, 원래 문자랑 똑같은 것들 토마토, 오디오 level...)
문제3 : 문자열 압축하기 (같은 문자가 있을 경우 해당 개수를 같이 출력)
(aabccccdd) -> a2b1c4d2

문제 풀 때, (메모리, 시간)

- var, let : 변수 키워드

1. 범위(Scope) : var로 선언된 변수는 함수 범위(function Scope), let로 선언된 변수는 블록 범위(block Scope)

function exam() {
    var x = 10;
    let y = 20;

    if(true) {
        var x = 30;
        let y = 40;

        console.log(x); //30
        console.log(y); //40
    }

    console.log(x); //30
    console.loj(y); //20
}

2. 호이스팅(Hoisting) : 코드 실행 전에 변수가 선언되었다고 처리되어. 실제 변수 할당 이전에도 사용할 수 있다.
var 호이스팅 발생, let 호이스팅 발생 x

console.log(x); //Undefined
console.log(y); // y가 없다.

var x = 10;
let y = 20;

console.log(x); //10
console.log(y); //20 

3. 재선언(Re-declaration) : var로 동일한 변수를 여러번 선언해도 에러가 발생하지 않고 재할당된다.

4. 전역 객체(Global object) : 객체 단계에서 전역범위에서 생성된 var 전역변수로 해석되고,
let, const, class 등 전역변수 프로퍼티로 해석되지 않는다.

- == : 같은지 판단, === : 같은지 판단
== : 자료형 상관없이 같은지 판단
=== : 자료형까지 확인해서 같은지 판단
0 == "0" : true, 0 === "0" : false
0 == [] : true, 0 === [] : false
"0" == [] : false

- 형변환
String(변수)
Int(변수)