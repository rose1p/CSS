- 윈도우 브라우저
window : window 객체는 창이나 탭에 대한 전역 객체, 웹 페이지 최상위 요소
document : 현재 문서에 대한 인터페이스, HTML 문서의 모든 요소와 내용을 접근해서 조작할 수 있다.
navigator : 현재 사용 중인 브라우저 및 운영체제에 접근할 수 있다.
location : 현제 URL과 관련된 정보 기능을 제공한다.
history : 브라우저 내에서 방문한 URL들의 기록(history stack)에 접근하여 조작할 수 있다.

- HTTP (Hypertext Transfer Protocol) : 웹에서 데이터를 주고 받기 위한 프로토콜
컴퓨터에서 데이터 교환 방식을 정의하는 규칙 체계, (통신 프로토콜 HTTP)
클라이언트(브라우저)와 서버 간의 통신을 담당하며 요청(Request)과 응답(Response) 형식으로 이루어진다.
클라이언트가 HTTP 요청을 보내고, 서버가 해당 요청에 대한 응답을 반환한다. HTML(문서, 이미지, 동영상 등)

- 쿠키 (Cookie)
웹 서버가 클라이언트에게 정보를 저장하고, 추적하기 위해 사용되는 작은 데이터 조각.
쿠키는 클라이언트의 로컬 컴퓨터 저장, 다음 통신 요청시 해당 정보를 함께 전송해서 상태 유지및 개인화 기능 구현

- 웹 스토리지 (Wed Storage)
웹 스토리지는 웹 어플리케이션에서 데이터를 임시, 영구 저장을 하기 위한 메커니즘.
웹 스토리지는 클라이언트 측에서 관리

1. localStorge : 객체를 통해 데이터 영구 저장. 동일 도메인 내에서 모든 페이지 및 세션 간에 공유
2. sessionStorage : 객체를 통해 데이터 임시 저장. 현제 세션에만 유지되기 때문에, 페이지가 닫히면 삭제

- 쿠키? 웹 스토리지?
웹 스토리지는 쿠키보다 용량 제한이 크고, API 간단하고, 보안도 우수하다.
로그인 정보, 사용자 설정

- 웹 워커(Wed Worker) : 브라우저의 메인 쓰레드와 별도로 백그라운드에서 실행되는 스크립트
오래 걸리는 작업을 백그라운드에서 처리해서 메인쓰레드가 멈추거나 지연되지 않도록

1. 백그라운드 실행 : 메인 스크립트와 별개로 백스라운드에서 실행된다. 오래 걸리는 작업이 UI 업데이트를 차단하거나 반응을 저하시키지 않도록
2. 멀티스레딩 : 자바스크립트는 기본적으로 싱글 스레드 언어다. 즉 한번에 하나씩 처리하는 언어. 그러나, 웹 워커를 사용하여 별도의 스레드에서 코드를 실행하여 동시에 여러 작업을 할 수 있다.
3. 메시지 기반 통신 : 메인 스크립트와 웹 워커 사이의 데이터 교환은 postMessage AP와 onmessage 이벤트 핸들러를 사용한다.
4. 제한된 기능 : DOM에 직접 접근할 수 없으며, 로컬 파일 시스템에도 접근할 수 없다. (window, document)

var Worker = new Worker('worker.js');

worker.onmessage = function(event) {
    console.log(event.data);
};

worker.postMessage("안녕하세요");

//window.js
