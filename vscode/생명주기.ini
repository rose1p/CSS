 - 생명주기

 1) 마운팅 (Mounting)
컴포넌트 인스턴스가 생성되어 DOM에 삽입될 때 메소드들이 차례로 실행된다.
+ constructor() : 컴포넌트가 마운트되기 전에 호출된다. 초기 state를 정의, 설정할 수 있다.
+ static getDerivedStateFromProps() : props을 받아 state를 업데이트할 때 사용된다.
+ render() : 컴포넌트 UI를 렌더링한다.
+ componentDidMount() : 컴포넌트가 마운트된 직후(DOM에 삽입된 직후)

 2) 업데이팅 (Updating)
prosp나 state가 변경되면 업데이팅이 발생하고 메소드들이 차례로 실행된다.
+ static getDerivedStateFromProps()
+ shouldComponentUpdate() : props나 state를 변경 시 리렌더링 전에 호출된다.
+ render()
+ getSnapshotBeforeUpdate() : render의 결과가 DOM에 반영되기 직전에 호툴된다.
+ componentDidUpdate() : 업데이트 직후에 실행된다. 이전 props와 state


 3) 언마운팅 (Unmounting)



  - Fragment
  React에서 여러 요소를 감싸주기 위해 사용되는 특별한 컴포넌트
  Fragment를 사용하면 추가적인 DOM노트를 생성하지 않고도 여러 요소를 그룹화할 수 있다.
  일반적으로 JSX 코드에서 컴포넌트에는 하나의 최상위 요소만이 존재해야 한다. 그래서 불필요하게 <div> 또는 다른 요소를 선언한다.
  이러한 상황에서 Fragment를 사용해서 요소들을 그룹화한다.
  Fragment는 아무런 출력을 하지 않고, 자식 요소들을 그룹화하는 역할만 수행한다.
  Fragment는 <> 열고, </>닫는다. 혹은 <React.Fragment> 로 작성할 수 있다.

class Example extends Component {
    renber() {
        return(
            <>
                <>
                    <p>안녕하세요</p>
                    <button>눌러주세요</button>
                </>
                <>
                    <p>안영히 가세요</p>
                    <button>누르지 마세요</button>
                </>
            <</>
        )
    };
}