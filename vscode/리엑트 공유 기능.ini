자바 스크립트 모듈 시스템에서 export와 import는 모듈 간의 기능을 공유하기 위해 사용되는 키워드다.

- export : 현재 모듈에서 정의된 함수, 객체, 값 등을 다른 자바스크립트 파일에서 사용할 수 있도록 공개합니다. 

- import : 다른 자바스트립트 파일에서 export된 기능을 가져오기 위해 사용한다.

- export default : 모듈당 하나만 가능한 기본 내보내기, default로 내보낸 값은 {} 없이 import할 수 있다.

- 아이템 추가 : 아이템을 추가하기 위해서는 기존 배열을 변경하는 것이 아니라, 새로운 배열 생성하고 이를 State로 관리해야한다.

const [item, setItems] = useState(['Apple', 'Banana', 'Kiwi']);

const addItem = () => {
    const newItem = prompt('Enter a new item:');
    if(newItem) {
        setItems([...items, newItem]);
    }
};

const removeItem = (index) => {
    const updateItem = items.filter((_, i) => i !== index);
    setItems(updateItem);
};


1. 사용자 로그인의 상태에 따라 다른 메시지를 보여주는 컴포넌트를 작성하시요. 로그인이 되어 있다면 환영합니다. 00님 아니면 로그인 해주세요를 출력
2. 배열에 있는 데이터로 리스트 아이템을 생성하는 컴포넌트를 작성하세요. [{id:1,trxt:'hello'}, {id:2, text:"byebye"}]
3. 아까 만든 로또 번호 6개 중복없이 만들기 && 사용자 입력으로 6개

- 바인딩(Binding) : 자바스크립트에서 함수나 메서드와 객체를 연력하는 과정
바인딩을 통해 함수가 특정 객체의 메서드를 동작하도록 할 수 있다.

1. 명시적 바인딩(Explicit Binding): bind(), call(), apply() 매서드를 사용하여 함수에 직접 인자로 전달된 객체와 연결
fuction hello() {
    console.log('Hello, ${this.name}');
}

const person = {
    name: "Kim",
};

sayhello.bind(person);

2. 암시적 바인딩(Implicit Binding) : 메서드 호출 시 앞에 위치한 객체와 연결
const person = {
    name: "Kim";
    hello() {
        console.log('Hello, ${this.name}');
    },
};

3. 생성자 함수 바인딩(Constructor Binding) : new 키워드를 사용하여 생성자 함수와 객체를 연결
function person(name) {
    this.name = name;
    this.sayhello = function () {
        console.log('Hello, ${this.name}');
    };
}

const Kim = new Person("Kim");
Kim.sayhello();

4. 화살표 함수 바인딩(Arrow Fuction Binding) : 주변  스코프의 this 값을 상속받는다.
const person = {
    name: 'Kim',
    sayhello: () => {
        console.log('Hello, ${this.name}');
    }, //객체에서 쉼표찍는 이유 : 메소드랑 구별하기 위해서
};
