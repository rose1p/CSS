 - 화살표 함수(arrow function) : ES6에 도입된 선언 방식

 //매개변수 없는 함수
 count func1 = () => {
    //함수내용
 };

//매개변수 한개
 const func1 = param => {
    //함수내용
 };

 //매개변수 여러개
 count func1 = (param1, param2,) => {
    //함수내용
 };

 //반환값이 있는 경우
 count func1 =() => XPathExpression;

 count func1 =() => {
    //함수 내용
    return expression;
 }

 {} 없어도 함수 선언 가능, this 키워드 없이 주변 스코프에서 this 값을 상속받는다. 화살표 함수 내부에서 다른 화살표 함수를 작성할 수 있다.

 클래스형 컴포넌트를 사용해서 증가, 감소하는 카운트앱 만들기

 - 조건부 랜더링 : JSX 내에서 JavaScript 표현식을 사용하여 조건부 로직을 작성할 수 있다.

 1) if/else
 function Example({number}) {
    if(number > 10) {
        return <div>10보다 큰값</div>;
    }else {
        return <div>10보다 작은 값</div>;
    }

    switch(number) {
        case 1:
        return <div>1</div>;
        case 2:
        return <div>2</div>;
        dafault:
        return <div>다른 값</div>
    }
 }

 2) 삼항연산자
 function Example({number}) {
    return (
        <div>{number>10 ? '10보다 큰 값' : '10보다 작은 값'}</div>
    );
 }

 3. &&연산자를 활용한 랜더링
 function Example ({message}) {
    return (
        <div>
            {message.length > 0 && <h2>Hello, {message}</h2>}
        </div>
    );
    if(message.length > 0) {
        return <h2>Hello, {message}</h2>;
    }
 }

 - 리스트와 key
const number = [1,2,3,4,5,6];
여러 개의 동일한 형태의 컴포넌트를 랜더링해야할 때, 배열의 각 요소에 대해 하나씩 컴포넌트를 생성하고 싶을 때,
이런 경우 map 매소드를 사용하여 각 요소별로 컴포넌트를 하나씩 생성한다. 단, 고유한 key값을 부여해야한다.

const list = number.map({number} =>
    <li>{number}</li>
);

const list = number.map({number} =>
    <li key={key.toString()}>{number}</li>
);
// 키 값이 중복될 수 있다. 보통 데이터 ID를 key 사용하는데, 최후의 수단으로 인덱스 번호를 사용하기도 한다.
// 배열의 순서가 바뀔 경우 key의 업데이트를 해야하기 때문에 비효율적이다. 최대한 인덱스 번호를 키 값으로 쓰는 것은 피하자.
// Key 값은 전역적으로 고유할 필요는 없다. 형제 사이에서만 고유하면 된다.

- 폼 처리 : 폼 요소의 상태를 관리하고 사용자 입력에 따라 반응하는 방법
인반적으로 on   casehange 이벤트 헨들러 통해 사용자의 입력을 상태에 전달한다. onSubmit 이벤트 핸들러를 통해 폼 제출 시 실행할 작업을 정의한다.
일반적으로 폼 처리는 이벤트 핸들러랑 상태로 한다.

1) 클래스 컴포넌트에서의 폼 처리
class NameForm extends Component {
    super(props);
    this.state = {value : ''};

    this.handleChange = this.hendleChange.bind(this);
    this.handleSubmit = this.hendleChange.bind(this);
}

handleChange(event) {
    this.setState({vanue: event.target.value});
    //event.target.value는 이벤트가 발생한 요소(target)인 입력 필드의 현재 값(value)
}

handleSubmit(event) {
    alert('A name submit: ' + this.state.value);
    event.preventDefault(); // 기본동작을 취소하는 역할
    // 폼을 제출하면 기본적으로 페이지가 다시 로드 or 새로고침
}

render() {
    tryurn(
        <form onSubmit={this.handleSubmit}>
            <label>Name:
                <input type = "text" value={this.state.value} onChange={this.handleChange}/>
            </label>
            <input type="submit" value="submit" />
        </form>
    )
}

2) 함수형 컴포넌트에서의 폼 처리 : Hooks
useState Hook, onChange, onSubmit

import React, {useState} from 'react';

fuction NameForm() {
    const[value, setValue] = useState(' ');

    const handleChange = (event) => setValue(event.target.value);

    const handleSubmit = (event) => {
        alert('A name submit: ' + value);
        event.preventDefault();
    };

    return (
        <label>Name:
            <input type="text" value={value} onChange={handleChange} />
        </label>
        <input type="submit" value="submit" />
    )
}